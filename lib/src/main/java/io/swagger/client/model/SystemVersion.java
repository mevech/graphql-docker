/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.40
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SystemVersionComponents;
import io.swagger.client.model.SystemVersionPlatform;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Response of Engine API: GET \&quot;/version\&quot; 
 */
@ApiModel(description = "Response of Engine API: GET \"/version\" ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-15T02:09:16.436+01:00")
public class SystemVersion {
  @SerializedName("Platform")
  private SystemVersionPlatform platform = null;

  @SerializedName("Components")
  private List<SystemVersionComponents> components = null;

  @SerializedName("Version")
  private String version = null;

  @SerializedName("ApiVersion")
  private String apiVersion = null;

  @SerializedName("MinAPIVersion")
  private String minAPIVersion = null;

  @SerializedName("GitCommit")
  private String gitCommit = null;

  @SerializedName("GoVersion")
  private String goVersion = null;

  @SerializedName("Os")
  private String os = null;

  @SerializedName("Arch")
  private String arch = null;

  @SerializedName("KernelVersion")
  private String kernelVersion = null;

  @SerializedName("Experimental")
  private Boolean experimental = null;

  @SerializedName("BuildTime")
  private String buildTime = null;

  public SystemVersion platform(SystemVersionPlatform platform) {
    this.platform = platform;
    return this;
  }

   /**
   * Get platform
   * @return platform
  **/
  @ApiModelProperty(value = "")
  public SystemVersionPlatform getPlatform() {
    return platform;
  }

  public void setPlatform(SystemVersionPlatform platform) {
    this.platform = platform;
  }

  public SystemVersion components(List<SystemVersionComponents> components) {
    this.components = components;
    return this;
  }

  public SystemVersion addComponentsItem(SystemVersionComponents componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<SystemVersionComponents>();
    }
    this.components.add(componentsItem);
    return this;
  }

   /**
   * Information about system components 
   * @return components
  **/
  @ApiModelProperty(value = "Information about system components ")
  public List<SystemVersionComponents> getComponents() {
    return components;
  }

  public void setComponents(List<SystemVersionComponents> components) {
    this.components = components;
  }

  public SystemVersion version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the daemon
   * @return version
  **/
  @ApiModelProperty(example = "19.03.12", value = "The version of the daemon")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public SystemVersion apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * The default (and highest) API version that is supported by the daemon 
   * @return apiVersion
  **/
  @ApiModelProperty(example = "1.40", value = "The default (and highest) API version that is supported by the daemon ")
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }

  public SystemVersion minAPIVersion(String minAPIVersion) {
    this.minAPIVersion = minAPIVersion;
    return this;
  }

   /**
   * The minimum API version that is supported by the daemon 
   * @return minAPIVersion
  **/
  @ApiModelProperty(example = "1.12", value = "The minimum API version that is supported by the daemon ")
  public String getMinAPIVersion() {
    return minAPIVersion;
  }

  public void setMinAPIVersion(String minAPIVersion) {
    this.minAPIVersion = minAPIVersion;
  }

  public SystemVersion gitCommit(String gitCommit) {
    this.gitCommit = gitCommit;
    return this;
  }

   /**
   * The Git commit of the source code that was used to build the daemon 
   * @return gitCommit
  **/
  @ApiModelProperty(example = "48a66213fe", value = "The Git commit of the source code that was used to build the daemon ")
  public String getGitCommit() {
    return gitCommit;
  }

  public void setGitCommit(String gitCommit) {
    this.gitCommit = gitCommit;
  }

  public SystemVersion goVersion(String goVersion) {
    this.goVersion = goVersion;
    return this;
  }

   /**
   * The version Go used to compile the daemon, and the version of the Go runtime in use. 
   * @return goVersion
  **/
  @ApiModelProperty(example = "go1.13.14", value = "The version Go used to compile the daemon, and the version of the Go runtime in use. ")
  public String getGoVersion() {
    return goVersion;
  }

  public void setGoVersion(String goVersion) {
    this.goVersion = goVersion;
  }

  public SystemVersion os(String os) {
    this.os = os;
    return this;
  }

   /**
   * The operating system that the daemon is running on (\&quot;linux\&quot; or \&quot;windows\&quot;) 
   * @return os
  **/
  @ApiModelProperty(example = "linux", value = "The operating system that the daemon is running on (\"linux\" or \"windows\") ")
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }

  public SystemVersion arch(String arch) {
    this.arch = arch;
    return this;
  }

   /**
   * The architecture that the daemon is running on 
   * @return arch
  **/
  @ApiModelProperty(example = "amd64", value = "The architecture that the daemon is running on ")
  public String getArch() {
    return arch;
  }

  public void setArch(String arch) {
    this.arch = arch;
  }

  public SystemVersion kernelVersion(String kernelVersion) {
    this.kernelVersion = kernelVersion;
    return this;
  }

   /**
   * The kernel version (&#x60;uname -r&#x60;) that the daemon is running on.  This field is omitted when empty. 
   * @return kernelVersion
  **/
  @ApiModelProperty(example = "4.19.76-linuxkit", value = "The kernel version (`uname -r`) that the daemon is running on.  This field is omitted when empty. ")
  public String getKernelVersion() {
    return kernelVersion;
  }

  public void setKernelVersion(String kernelVersion) {
    this.kernelVersion = kernelVersion;
  }

  public SystemVersion experimental(Boolean experimental) {
    this.experimental = experimental;
    return this;
  }

   /**
   * Indicates if the daemon is started with experimental features enabled.  This field is omitted when empty / false. 
   * @return experimental
  **/
  @ApiModelProperty(example = "true", value = "Indicates if the daemon is started with experimental features enabled.  This field is omitted when empty / false. ")
  public Boolean isExperimental() {
    return experimental;
  }

  public void setExperimental(Boolean experimental) {
    this.experimental = experimental;
  }

  public SystemVersion buildTime(String buildTime) {
    this.buildTime = buildTime;
    return this;
  }

   /**
   * The date and time that the daemon was compiled. 
   * @return buildTime
  **/
  @ApiModelProperty(example = "2020-06-22T15:49:27.000000000+00:00", value = "The date and time that the daemon was compiled. ")
  public String getBuildTime() {
    return buildTime;
  }

  public void setBuildTime(String buildTime) {
    this.buildTime = buildTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemVersion systemVersion = (SystemVersion) o;
    return Objects.equals(this.platform, systemVersion.platform) &&
        Objects.equals(this.components, systemVersion.components) &&
        Objects.equals(this.version, systemVersion.version) &&
        Objects.equals(this.apiVersion, systemVersion.apiVersion) &&
        Objects.equals(this.minAPIVersion, systemVersion.minAPIVersion) &&
        Objects.equals(this.gitCommit, systemVersion.gitCommit) &&
        Objects.equals(this.goVersion, systemVersion.goVersion) &&
        Objects.equals(this.os, systemVersion.os) &&
        Objects.equals(this.arch, systemVersion.arch) &&
        Objects.equals(this.kernelVersion, systemVersion.kernelVersion) &&
        Objects.equals(this.experimental, systemVersion.experimental) &&
        Objects.equals(this.buildTime, systemVersion.buildTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platform, components, version, apiVersion, minAPIVersion, gitCommit, goVersion, os, arch, kernelVersion, experimental, buildTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemVersion {\n");
    
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    minAPIVersion: ").append(toIndentedString(minAPIVersion)).append("\n");
    sb.append("    gitCommit: ").append(toIndentedString(gitCommit)).append("\n");
    sb.append("    goVersion: ").append(toIndentedString(goVersion)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    arch: ").append(toIndentedString(arch)).append("\n");
    sb.append("    kernelVersion: ").append(toIndentedString(kernelVersion)).append("\n");
    sb.append("    experimental: ").append(toIndentedString(experimental)).append("\n");
    sb.append("    buildTime: ").append(toIndentedString(buildTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

