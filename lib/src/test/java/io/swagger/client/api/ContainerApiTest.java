/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.40
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ContainerChangeResponseItem;
import io.swagger.client.model.ContainerCreateResponse;
import io.swagger.client.model.ContainerInspectResponse;
import io.swagger.client.model.ContainerPruneResponse;
import io.swagger.client.model.ContainerSummary;
import io.swagger.client.model.ContainerTopResponse;
import io.swagger.client.model.ContainerUpdateResponse;
import io.swagger.client.model.ContainerWaitResponse;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.InlineResponse400;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContainerApi
 */
@Ignore
public class ContainerApiTest {

    private final ContainerApi api = new ContainerApi();

    
    /**
     * Get an archive of a filesystem resource in a container
     *
     * Get a tar archive of a resource in the filesystem of container id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerArchiveTest() throws ApiException {
        String id = null;
        String path = null;
        api.containerArchive(id, path);

        // TODO: test validations
    }
    
    /**
     * Get information about files in a container
     *
     * A response header &#x60;X-Docker-Container-Path-Stat&#x60; is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerArchiveInfoTest() throws ApiException {
        String id = null;
        String path = null;
        api.containerArchiveInfo(id, path);

        // TODO: test validations
    }
    
    /**
     * Attach to a container
     *
     * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the &#x60;stream&#x60; or &#x60;logs&#x60; parameter must be &#x60;true&#x60; for this endpoint to do anything.  See the [documentation for the &#x60;docker attach&#x60; command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport &#x60;stdin&#x60;, &#x60;stdout&#x60;, and &#x60;stderr&#x60; on the same socket.  This is the response from the daemon for an attach request:  &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] &#x60;&#x60;&#x60;  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  &#x60;&#x60;&#x60; POST /containers/16253994b7c4/attach?stream&#x3D;1&amp;stdout&#x3D;1 HTTP/1.1 Upgrade: tcp Connection: Upgrade &#x60;&#x60;&#x60;  The Docker daemon will respond with a &#x60;101 UPGRADED&#x60; response, and will similarly follow with the raw stream:  &#x60;&#x60;&#x60; HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] &#x60;&#x60;&#x60;  ### Stream format  When the TTY setting is disabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out &#x60;stdout&#x60; and &#x60;stderr&#x60;. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (&#x60;stdout&#x60; or &#x60;stderr&#x60;). It also contains the size of the associated frame encoded in the last four bytes (&#x60;uint32&#x60;).  It is encoded on the first eight bytes like this:  &#x60;&#x60;&#x60;go header :&#x3D; [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} &#x60;&#x60;&#x60;  &#x60;STREAM_TYPE&#x60; can be:  - 0: &#x60;stdin&#x60; (is written on &#x60;stdout&#x60;) - 1: &#x60;stdout&#x60; - 2: &#x60;stderr&#x60;  &#x60;SIZE1, SIZE2, SIZE3, SIZE4&#x60; are the four bytes of the &#x60;uint32&#x60; size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of &#x60;STREAM_TYPE&#x60;.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose &#x60;stdout&#x60; or &#x60;stderr&#x60; depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client&#39;s &#x60;stdin&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerAttachTest() throws ApiException {
        String id = null;
        String detachKeys = null;
        Boolean logs = null;
        Boolean stream = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean stderr = null;
        api.containerAttach(id, detachKeys, logs, stream, stdin, stdout, stderr);

        // TODO: test validations
    }
    
    /**
     * Attach to a container via a websocket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerAttachWebsocketTest() throws ApiException {
        String id = null;
        String detachKeys = null;
        Boolean logs = null;
        Boolean stream = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean stderr = null;
        api.containerAttachWebsocket(id, detachKeys, logs, stream, stdin, stdout, stderr);

        // TODO: test validations
    }
    
    /**
     * Get changes on a containerâ€™s filesystem
     *
     * Returns which files in a container&#39;s filesystem have been added, deleted, or modified. The &#x60;Kind&#x60; of modification can be one of:  - &#x60;0&#x60;: Modified - &#x60;1&#x60;: Added - &#x60;2&#x60;: Deleted 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerChangesTest() throws ApiException {
        String id = null;
        List<ContainerChangeResponseItem> response = api.containerChanges(id);

        // TODO: test validations
    }
    
    /**
     * Create a container
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerCreateTest() throws ApiException {
        object body = null;
        String name = null;
        ContainerCreateResponse response = api.containerCreate(body, name);

        // TODO: test validations
    }
    
    /**
     * Remove a container
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerDeleteTest() throws ApiException {
        String id = null;
        Boolean v = null;
        Boolean force = null;
        Boolean link = null;
        api.containerDelete(id, v, force, link);

        // TODO: test validations
    }
    
    /**
     * Export a container
     *
     * Export the contents of a container as a tarball.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerExportTest() throws ApiException {
        String id = null;
        api.containerExport(id);

        // TODO: test validations
    }
    
    /**
     * Inspect a container
     *
     * Return low-level information about a container.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerInspectTest() throws ApiException {
        String id = null;
        Boolean size = null;
        ContainerInspectResponse response = api.containerInspect(id, size);

        // TODO: test validations
    }
    
    /**
     * Kill a container
     *
     * Send a POSIX signal to a container, defaulting to killing to the container. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerKillTest() throws ApiException {
        String id = null;
        String signal = null;
        api.containerKill(id, signal);

        // TODO: test validations
    }
    
    /**
     * List containers
     *
     * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerListTest() throws ApiException {
        Boolean all = null;
        Integer limit = null;
        Boolean size = null;
        String filters = null;
        ContainerSummary response = api.containerList(all, limit, size, filters);

        // TODO: test validations
    }
    
    /**
     * Get container logs
     *
     * Get &#x60;stdout&#x60; and &#x60;stderr&#x60; logs from a container.  Note: This endpoint works only for containers with the &#x60;json-file&#x60; or &#x60;journald&#x60; logging driver. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerLogsTest() throws ApiException {
        String id = null;
        Boolean follow = null;
        Boolean stdout = null;
        Boolean stderr = null;
        Integer since = null;
        Integer until = null;
        Boolean timestamps = null;
        String tail = null;
        byte[] response = api.containerLogs(id, follow, stdout, stderr, since, until, timestamps, tail);

        // TODO: test validations
    }
    
    /**
     * Pause a container
     *
     * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the &#x60;SIGSTOP&#x60; signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerPauseTest() throws ApiException {
        String id = null;
        api.containerPause(id);

        // TODO: test validations
    }
    
    /**
     * Delete stopped containers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerPruneTest() throws ApiException {
        String filters = null;
        ContainerPruneResponse response = api.containerPrune(filters);

        // TODO: test validations
    }
    
    /**
     * Rename a container
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerRenameTest() throws ApiException {
        String id = null;
        String name = null;
        api.containerRename(id, name);

        // TODO: test validations
    }
    
    /**
     * Resize a container TTY
     *
     * Resize the TTY for a container.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerResizeTest() throws ApiException {
        String id = null;
        Integer h = null;
        Integer w = null;
        api.containerResize(id, h, w);

        // TODO: test validations
    }
    
    /**
     * Restart a container
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerRestartTest() throws ApiException {
        String id = null;
        Integer t = null;
        api.containerRestart(id, t);

        // TODO: test validations
    }
    
    /**
     * Start a container
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerStartTest() throws ApiException {
        String id = null;
        String detachKeys = null;
        api.containerStart(id, detachKeys);

        // TODO: test validations
    }
    
    /**
     * Get container stats based on resource usage
     *
     * This endpoint returns a live stream of a containerâ€™s resource usage statistics.  The &#x60;precpu_stats&#x60; is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the &#x60;cpu_stats&#x60; field.  If either &#x60;precpu_stats.online_cpus&#x60; or &#x60;cpu_stats.online_cpus&#x60; is nil then for compatibility with older daemons the length of the corresponding &#x60;cpu_usage.percpu_usage&#x60; array should be used.  To calculate the values shown by the &#x60;stats&#x60; command of the docker cli tool the following formulas can be used: * used_memory &#x3D; &#x60;memory_stats.usage - memory_stats.stats.cache&#x60; * available_memory &#x3D; &#x60;memory_stats.limit&#x60; * Memory usage % &#x3D; &#x60;(used_memory / available_memory) * 100.0&#x60; * cpu_delta &#x3D; &#x60;cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage&#x60; * system_cpu_delta &#x3D; &#x60;cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage&#x60; * number_cpus &#x3D; &#x60;lenght(cpu_stats.cpu_usage.percpu_usage)&#x60; or &#x60;cpu_stats.online_cpus&#x60; * CPU usage % &#x3D; &#x60;(cpu_delta / system_cpu_delta) * number_cpus * 100.0&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerStatsTest() throws ApiException {
        String id = null;
        Boolean stream = null;
        Object response = api.containerStats(id, stream);

        // TODO: test validations
    }
    
    /**
     * Stop a container
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerStopTest() throws ApiException {
        String id = null;
        Integer t = null;
        api.containerStop(id, t);

        // TODO: test validations
    }
    
    /**
     * List processes running inside a container
     *
     * On Unix systems, this is done by running the &#x60;ps&#x60; command. This endpoint is not supported on Windows. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerTopTest() throws ApiException {
        String id = null;
        String psArgs = null;
        ContainerTopResponse response = api.containerTop(id, psArgs);

        // TODO: test validations
    }
    
    /**
     * Unpause a container
     *
     * Resume a container which has been paused.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerUnpauseTest() throws ApiException {
        String id = null;
        api.containerUnpause(id);

        // TODO: test validations
    }
    
    /**
     * Update a container
     *
     * Change various configuration options of a container without having to recreate it. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerUpdateTest() throws ApiException {
        String id = null;
        object update = null;
        ContainerUpdateResponse response = api.containerUpdate(id, update);

        // TODO: test validations
    }
    
    /**
     * Wait for a container
     *
     * Block until a container stops, then returns the exit code.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void containerWaitTest() throws ApiException {
        String id = null;
        String condition = null;
        ContainerWaitResponse response = api.containerWait(id, condition);

        // TODO: test validations
    }
    
    /**
     * Extract an archive of files or folders to a directory in a container
     *
     * Upload a tar archive to be extracted to a path in the filesystem of container id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putContainerArchiveTest() throws ApiException {
        String id = null;
        String path = null;
        byte[] inputStream = null;
        String noOverwriteDirNonDir = null;
        String copyUIDGID = null;
        api.putContainerArchive(id, path, inputStream, noOverwriteDirNonDir, copyUIDGID);

        // TODO: test validations
    }
    
}
